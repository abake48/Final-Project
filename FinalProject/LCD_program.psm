;------------------------------------------;
;  			Defining Delay lengths		   ;
;------------------------------------------;

CONSTANT delay_1us_constant  , 24'd
CONSTANT delay_2us_constant  , 48'd	   ; 2 * 24 clock cycles(1us)
CONSTANT delay_EN_constant	 , 168'd   ; 7 * 24 clock cycles(1us)
;NAMEREG sA , data7_4 
;NAMEREG sB , data3_0
;NAMEREG sC , rs
;NAMEREG sD , rw
;NAMEREG sE , en
	
;------------------------------------------;
;  	     	Defining Ports and Regs	 	   ;
;------------------------------------------;

CONSTANT port_up 		,		00			; Read inputs from buttons
CONSTANT port_down   	,		01
CONSTANT port_center 	,		02
CONSTANT port_data 		,		03			; Port for outputting 4-bits of data
;CONSTANT port_EN		,		04			; Port for Enable output
;CONSTANT port_RS		,		05			; Port for Register Select output
;CONSTANT port_RW		,		06			; Port for Read/Write output

;--------------------------------------------;
; ASCII labels                               ;
;--------------------------------------------;
CONSTANT ascii_SPACE      , 20    ; ascii code
CONSTANT ascii_EXCLAIM    , 21    ; ascii code
CONSTANT ascii_DBLQUOT    , 22    ; ascii code
CONSTANT ascii_NUMSIGN    , 23    ; ascii code
CONSTANT ascii_DOLLAR     , 24    ; ascii code
CONSTANT ascii_PERCENT    , 25    ; ascii code
CONSTANT ascii_AMP        , 26    ; ascii code
CONSTANT ascii_SINQUOT    , 27    ; ascii code
CONSTANT ascii_LPAREN     , 28    ; ascii code
CONSTANT ascii_RPAREN     , 29    ; ascii code
CONSTANT ascii_ASTERISK   , 2A    ; ascii code
CONSTANT ascii_PLUS       , 2B    ; ascii code
CONSTANT ascii_COMMA      , 2C    ; ascii code
CONSTANT ascii_MINUS      , 2D    ; ascii code
CONSTANT ascii_PERIOD     , 2E    ; ascii code
CONSTANT ascii_FWDSLASH   , 2F    ; ascii code

CONSTANT ascii_0          , 30    ; ascii code
CONSTANT ascii_1          , 31    ; ascii code
CONSTANT ascii_2          , 32    ; ascii code
CONSTANT ascii_3          , 33    ; ascii code
CONSTANT ascii_4          , 34    ; ascii code
CONSTANT ascii_5          , 35    ; ascii code
CONSTANT ascii_6          , 36    ; ascii code
CONSTANT ascii_7          , 37    ; ascii code
CONSTANT ascii_8          , 38    ; ascii code
CONSTANT ascii_9          , 39    ; ascii code
CONSTANT ascii_COLON      , 3A    ; ascii code
CONSTANT ascii_SEMI       , 3B    ; ascii code
CONSTANT ascii_LESS       , 3C    ; ascii code
CONSTANT ascii_EQUAL      , 3D    ; ascii code
CONSTANT ascii_GREATER    , 3E    ; ascii code
CONSTANT ascii_QUESTION   , 3F    ; ascii code

CONSTANT ascii_CIRCAT     , 40    ; ascii code
CONSTANT ascii_A          , 41    ; ascii code
CONSTANT ascii_B          , 42    ; ascii code
CONSTANT ascii_C          , 43    ; ascii code
CONSTANT ascii_D          , 44    ; ascii code
CONSTANT ascii_E          , 45    ; ascii code
CONSTANT ascii_F          , 46    ; ascii code
CONSTANT ascii_G          , 47    ; ascii code
CONSTANT ascii_H          , 48    ; ascii code
CONSTANT ascii_I          , 49    ; ascii code
CONSTANT ascii_J          , 4A    ; ascii code
CONSTANT ascii_K          , 4B    ; ascii code
CONSTANT ascii_L          , 4C    ; ascii code
CONSTANT ascii_M          , 4D    ; ascii code
CONSTANT ascii_N          , 4E    ; ascii code
CONSTANT ascii_O          , 4F    ; ascii code

CONSTANT ascii_P          , 50    ; ascii code
CONSTANT ascii_Q          , 51    ; ascii code
CONSTANT ascii_R          , 52    ; ascii code
CONSTANT ascii_S          , 53    ; ascii code
CONSTANT ascii_T          , 54    ; ascii code
CONSTANT ascii_U          , 55    ; ascii code
CONSTANT ascii_V          , 56    ; ascii code
CONSTANT ascii_W          , 57    ; ascii code
CONSTANT ascii_X          , 58    ; ascii code
CONSTANT ascii_Y          , 59    ; ascii code
CONSTANT ascii_Z          , 5A    ; ascii code
CONSTANT ascii_LBKT       , 5B    ; ascii code
CONSTANT ascii_BKSLASH    , 5C    ; ascii code
CONSTANT ascii_RBKT       , 5D    ; ascii code
CONSTANT ascii_CARET      , 5E    ; ascii code
CONSTANT ascii_UNDER      , 5F    ; ascii code

CONSTANT ascii_TICK       , 60    ; ascii code
CONSTANT ascii_a          , 61    ; ascii code
CONSTANT ascii_b          , 62    ; ascii code
CONSTANT ascii_c          , 63    ; ascii code
CONSTANT ascii_d          , 64    ; ascii code
CONSTANT ascii_e          , 65    ; ascii code
CONSTANT ascii_f          , 66    ; ascii code
CONSTANT ascii_g          , 67    ; ascii code
CONSTANT ascii_h          , 68    ; ascii code
CONSTANT ascii_i          , 69    ; ascii code
CONSTANT ascii_j          , 6A    ; ascii code
CONSTANT ascii_k          , 6B    ; ascii code
CONSTANT ascii_l          , 6C    ; ascii code
CONSTANT ascii_m          , 6D    ; ascii code
CONSTANT ascii_n          , 6E    ; ascii code
CONSTANT ascii_o          , 6F    ; ascii code

CONSTANT ascii_p          , 70    ; ascii code
CONSTANT ascii_q          , 71    ; ascii code
CONSTANT ascii_r          , 72    ; ascii code
CONSTANT ascii_s          , 73    ; ascii code
CONSTANT ascii_t          , 74    ; ascii code
CONSTANT ascii_u          , 75    ; ascii code
CONSTANT ascii_v          , 76    ; ascii code
CONSTANT ascii_w          , 77    ; ascii code
CONSTANT ascii_x          , 78    ; ascii code
CONSTANT ascii_y          , 79    ; ascii code
CONSTANT ascii_z          , 7A    ; ascii code
CONSTANT ascii_LBRACE     , 7B    ; ascii code
CONSTANT ascii_VBAR       , 7C    ; ascii code
CONSTANT ascii_RBRACE     , 7D    ; ascii code
CONSTANT ascii_TILDE      , 7E    ; ascii code
CONSTANT ascii_DEL        , 7F    ; ascii code

;-------------------------------------------;
;				Prayer  					;
;-------------------------------------------;
ENABLE INTERRUPT

	CALL LCD_reset
	;CALL delay_40us

	
;-------------------------------------------;
;				Defining Routines			;
;-------------------------------------------;
delay_1us: LOAD s0, delay_1us_constant
wait_1us: SUB s0, 01
		 JUMP NZ, wait_1us
		 RETURN
		 
delay_2us: LOAD s0, delay_2us_constant
wait_2us: SUB s0, 01
		 JUMP NZ, wait_2us
		 RETURN

delay_EN: LOAD s0, delay_EN_constant
wait_EN: SUB s0, 01
		 JUMP NZ, wait_EN
		 RETURN		 
		 
delay_40us: LOAD s1, 20'd                         ;20 x 2us = 40us
wait_40us: CALL delay_2us
		 SUB s1, 01
		 JUMP NZ, wait_40us
		 RETURN

delay_1ms: LOAD s2, 25'd                         ;25 x 40us = 1ms
wait_1ms: CALL delay_40us
		 SUB s2, 01
		 JUMP NZ, wait_1ms
		 RETURN
		 
delay_2ms: LOAD s2, 50'd                         ;50 x 40us = 2ms
wait_2ms: CALL delay_40us
		 SUB s2, 01
		 JUMP NZ, wait_2ms
		 RETURN
		 
delay_30ms: LOAD s3, 15'd                         ;15 x 2ms = 30ms
wait_30ms: CALL delay_2ms
		 SUB s3, 01
		 JUMP NZ, wait_30ms
		 RETURN
		 
pulse_EN:
	LOAD s3, 01
	OUTPUT s3, port_data	
	CALL delay_EN
	LOAD s3, 00
	OUTPUT s3, port_data
	RETURN	
	

LCD_cursor: TEST s5, 10                         ;test for line 1
		 JUMP Z, set_line2
		 AND s5, 0F                          ;make address in range 80 to 8F for line 1
		 OR s5, 80
		 CALL LCD_write_inst8                ;instruction write to set cursor
		 RETURN
set_line2: AND s5, 0F                          ;make address in range C0 to CF for line 2
		 OR s5, C0
		 CALL LCD_write_inst8                ;instruction write to set cursor
		 RETURN	
	

LCD_write_inst4: AND s4, F8                          ;Enable=1 RS=0 Instruction, RW=0 Write, E=0
                 OUTPUT s4, port_data          ;set up RS and RW >40ns before enable pulse
                 CALL pulse_EN
                 RETURN

LCD_write_inst8: LOAD s4, s5
                 AND s4, F0                          ;Enable=0 RS=0 Instruction, RW=0 Write, E=0
                 OR s4, 08		                     ;Enable=1
                 CALL LCD_write_inst4                ;write upper nibble
                 CALL delay_1us                      ;wait >1us
                 LOAD s4, s5                         ;select lower nibble with
                 SL1 s4                              ;Enable=1
                 SL0 s4                              ;RS=0 Instruction
                 SL0 s4                              ;RW=0 Write
                 SL0 s4                              ;E=0
                 CALL LCD_write_inst4                ;write lower nibble
                 CALL delay_40us                     ;wait >40us
                 LOAD s4, F0                         ;Enable=0 RS=0 Instruction, RW=0 Write, E=0
                 OUTPUT s4, port_data          		 ;Release master enable
                 RETURN				 
				 
				 
LCD_write_data:
	LOAD s4, s5
	AND s4, F0
	OR s4, 0C
	OUTPUT s4, port_data
	CALL pulse_EN
	CALL delay_1us
	LOAD s4, s5
	SL1 s4
	SL1 s4
	SL0 s4
	SL0 s4
	OUTPUT s4, port_data
	CALL pulse_EN
	CALL delay_40us 
	LOAD s4, F0                         ;Enable=0 RS=0 Instruction, RW=0 Write, E=0
	OUTPUT s4, port_data          ;Release master enable
	RETURN
	
;-------------------------------------------;
;			Initialization of LCD			;
;-------------------------------------------;
	

LCD_reset:
		 CALL delay_30ms                     ;wait more that 15ms for display to be ready
		 LOAD s4, 30
		 CALL LCD_write_inst4                ;send '3'
		 CALL delay_2ms                     ;wait >4.1ms
		 CALL delay_2ms
		 CALL delay_1ms
		 LOAD s4, 30
		 CALL LCD_write_inst4                ;send '3'
		 CALL delay_40us                      ;wait >100us
		 CALL delay_40us
		 CALL delay_40us
		 LOAD s4, 30
		 CALL LCD_write_inst4                ;send '3'
		 CALL delay_40us                     ;wait >40us
		 LOAD s4, 20
		 CALL LCD_write_inst4                ;send '2'
		 CALL delay_40us                     ;wait >40us
		 LOAD s5, 28                         ;Function set
		 CALL LCD_write_inst8
		 LOAD s5, 06                         ;Entry mode
		 CALL LCD_write_inst8
		 LOAD s5, 0C                         ;Display control
		 CALL LCD_write_inst8
LCD_clear: 
		 LOAD s5, 01                         ;Display clear
		 CALL LCD_write_inst8
		 CALL delay_1ms                      ;wait >1.64ms for display to clear
		 CALL delay_1ms
		 LOAD s5, 13
		 CALL LCD_cursor
		 LOAD s5, 3A                         ;;;;;;;;;;;;;;;;;;;;;;;    :
		 CALL LCD_write_data
		 LOAD s5, 16
		 CALL LCD_cursor
		 LOAD s5, 2D                         ;;;;;;;;;;;;;;;;;;;;;;     -
		 CALL LCD_write_data
		 LOAD s5, 20
		 CALL LCD_cursor
		 LOAD s5, 2D                         ;;;;;;;;;;;;;;;;;;;;;;     -
		 CALL LCD_write_data
		 LOAD s5, 2D                         ;;;;;;;;;;;;;;;;;;;;;;     -
		 CALL LCD_write_data
		 LOAD s5, 2D                         ;;;;;;;;;;;;;;;;;;;;;;     -
		 CALL LCD_write_data
		 LOAD s5, 28
		 CALL LCD_cursor
		 LOAD s5, 2F                         ;;;;;;;;;;;;;;;;;;;;;;     /
		 CALL LCD_write_data
		 LOAD s5, 2B
		 CALL LCD_cursor
		 LOAD s5, 2F                         ;;;;;;;;;;;;;;;;;;;;;;     -
		 CALL LCD_write_data
		 RETURN
	
